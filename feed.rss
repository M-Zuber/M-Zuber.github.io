<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Dreams and Adventures</title>
		<link>http://m-zuber.github.io/</link>
		<description>A world of dreams and adventure with code awaits!</description>
		<copyright>2018</copyright>
		<pubDate>Wed, 11 Jul 2018 04:06:24 GMT</pubDate>
		<lastBuildDate>Wed, 11 Jul 2018 04:06:24 GMT</lastBuildDate>
		<item>
			<title>Setting a prop to typeof enum in vue SFC</title>
			<link>http://m-zuber.github.io/posts/typescript-enum-props-in-vue</link>
			<description>A world of dreams and adventure with code awaits!</description>
			<guid>http://m-zuber.github.io/posts/typescript-enum-props-in-vue</guid>
			<pubDate>Tue, 10 Jul 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;One of the ways to get typescript support inside single file components is to use &lt;a href="https://github.com/vuejs/vue-class-component"&gt;vue-class-component&lt;/a&gt; together with &lt;a href="https://github.com/kaorun343/vue-property-decorator"&gt;vue-property-decorator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This enables you to give better typings for your props:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;import { Vue, Prop, Component } from "vue-property-decorator";

@Component({
    name: 'MyCoolComponent'
})
export default class extends Vue {
    @Prop() complexType!: ComplexType
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the caveat is that Vue will treat the type as &lt;code&gt;Object&lt;/code&gt; in most cases.
One place where this can be a problem is when using enums.&lt;/p&gt;
&lt;p&gt;With the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;enum Suites {
    Heart = 1,
    Spade = 2,
    Diamond = 3,
    Club = 3
}

...component declaration
@Prop() suite!: Suites;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will get type checking inside you file, but at runtime you may encounter the following error
&lt;code&gt;[Vue warn]: Invalid prop: type check failed for prop "suite". Expected Object, got Number.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is because under the hood, a typescript enum looks like this (&lt;a href="https://www.typescriptlang.org/play/#src=enum%20Suites%20%7B%0D%0A%20%20%20%20Heart%20%3D%201%2C%0D%0A%20%20%20%20Spade%20%3D%202%2C%0D%0A%20%20%20%20Diamond%20%3D%203%2C%0D%0A%20%20%20%20Club%20%3D%203%0D%0A%7D"&gt;ts playground link&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;var Suites;
(function (Suites) {
    Suites[Suites["Heart"] = 1] = "Heart";
    Suites[Suites["Spade"] = 2] = "Spade";
    Suites[Suites["Diamond"] = 3] = "Diamond";
    Suites[Suites["Club"] = 3] = "Club";
})(Suites || (Suites = {}));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and when an enum member is passed into the vue component, it thinks it got a number.&lt;/p&gt;
&lt;p&gt;The fix I found was to use the following configuration inside the &lt;code&gt;Prop&lt;/code&gt; decorator.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;@Prop({ 
    type: Number,
    default: null // Use this if the value can be null or undefined
})
suite!: Suite;
&lt;/code&gt;&lt;/pre&gt;</content:encoded>
		</item>
		<item>
			<title>Tomato Soup and Garnish</title>
			<link>http://m-zuber.github.io/posts/tomato-soup</link>
			<description>A world of dreams and adventure with code awaits!</description>
			<guid>http://m-zuber.github.io/posts/tomato-soup</guid>
			<pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="soup"&gt;Soup&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Heat up some olive oil in a pot.&lt;/li&gt;
&lt;li&gt;Toss in a bunch of soft tomatoes and/or cherry tomatoes.
&lt;ul&gt;
&lt;li&gt;Keep in mind that cherry tomatoes tend to be sweeter than regular ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spice with:
&lt;ul&gt;
&lt;li&gt;Salt&lt;/li&gt;
&lt;li&gt;Black pepper&lt;/li&gt;
&lt;li&gt;Basil&lt;/li&gt;
&lt;li&gt;Oregano&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cook over medium-low heat until there is the desired amount of liquid.
&lt;ul&gt;
&lt;li&gt;If you want a smoother soup, it can be blended once finished cooking.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Serve hot with rice, croutons, cheese of any kind, and/or a garnish.&lt;/p&gt;
&lt;h1 id="garnish"&gt;Garnish&lt;/h1&gt;
&lt;h2 id="ingredients"&gt;Ingredients&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Onion&lt;/li&gt;
&lt;li&gt;Garlic&lt;/li&gt;
&lt;li&gt;Scallions&lt;/li&gt;
&lt;li&gt;Hot peppers&lt;/li&gt;
&lt;li&gt;Salt&lt;/li&gt;
&lt;li&gt;Black pepper&lt;/li&gt;
&lt;li&gt;Oregano&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="instructions"&gt;Instructions&lt;/h2&gt;
&lt;p&gt;Mince all the ingredients.&lt;/p&gt;
&lt;p&gt;
&lt;img src="../images/tomato-soup-garnish-start.jpg" class="img-responsive"&gt;
&lt;/p&gt;
&lt;p&gt;Fry (with no to little oil) until browned.&lt;/p&gt;
&lt;p&gt;
&lt;img src="../images/tomato-soup-garnish-done.jpg" class="img-responsive"&gt;
&lt;/p&gt;
&lt;h1 id="end-result"&gt;End Result&lt;/h1&gt;
&lt;p&gt;
&lt;img src="../images/tomato-soup-served.jpg" class="img-responsive"&gt;
&lt;/p&gt;</content:encoded>
		</item>
		<item>
			<title>Using typescript enums inside a single file vue component</title>
			<link>http://m-zuber.github.io/posts/typescript-enums-with-vue</link>
			<description>A world of dreams and adventure with code awaits!</description>
			<guid>http://m-zuber.github.io/posts/typescript-enums-with-vue</guid>
			<pubDate>Thu, 23 Nov 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;If you want to use a &lt;a href="https://www.typescriptlang.org/docs/handbook/enums.html"&gt;typescript enum&lt;/a&gt; as the backing data source for a select element in vue, you need to include the enum itself in the data of the component.&lt;/p&gt;
&lt;p&gt;This would result in code that looks similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
      &amp;lt;select v-model="paymentType"&amp;gt;
          &amp;lt;option :value="null"&amp;gt;Select Option&amp;lt;/option&amp;gt;
          &amp;lt;option :value="PaymentType.CreditCard"&amp;gt;Credit Card&amp;lt;/option&amp;gt;
          &amp;lt;option :value="PaymentType.Cash"&amp;gt;Cash&amp;lt;/option&amp;gt;
          &amp;lt;option :value="PaymentType.Check"&amp;gt;Check&amp;lt;/option&amp;gt;
      &amp;lt;/select&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;&amp;lt;script&amp;gt;
import Vue from 'vue';

enum PaymentType {
    CreditCard,
    Cash,
    Check
}

export default Vue.extend({
    name: 'PaymentType',
    data () {
        return {
            paymentType: null as PaymentType | null,
            PaymentType: PaymentType
        }
    }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content:encoded>
		</item>
		<item>
			<title>Using null as a default value in vue.js data</title>
			<link>http://m-zuber.github.io/posts/default-value-in-vue-data</link>
			<description>A world of dreams and adventure with code awaits!</description>
			<guid>http://m-zuber.github.io/posts/default-value-in-vue-data</guid>
			<pubDate>Thu, 23 Nov 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;While upgrading a project at work to use the &lt;a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08"&gt;newest typescript typings for vue&lt;/a&gt;, I ran across an interesting problem.&lt;/p&gt;
&lt;p&gt;I had the following component (markup ommited to make the code sample smaller):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;import Vue, { ComponentOptions } from 'vue';

enum PaymentType {
    Check
    CreditCard
    Cash
}

interface AddPayment extends Vue {
    paymentType: PaymentType;
    amount: number;
    checkNumber: string;
    ccNumber: string;
}
export default {
    name: 'AddPayment',
    data () {
        return {
            paymentType: null,
            checkNumber: '',
            ccNumber: '',
            amount: 0,
            PaymentType: PaymentType
        }
    },
    computed: {
        valid() {
            const basic = +this.amount &amp;gt; 0 &amp;amp;&amp;amp; this.paymentType !== null;

           switch (this.paymentType) {
				case PaymentType.CreditCard:
					return basic &amp;amp;&amp;amp; !!(this.ccNumber || '').trim().length;
				case PaymentType.Check:
					return basic &amp;amp;&amp;amp; !!(this.checkNumber || '').trim().length;
				default:
					return basic;
			}
        }
    }
} as ComponentOptions&amp;lt;AddPayment&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but once I upgraded to typescript to 2.6.1 and vue to 2.5.8, the compilers first complaint was that &lt;code&gt;Property 'trim' does not exist on type '(() =&amp;gt; any) | ComputedOptions&amp;lt;any&amp;gt;'.&lt;/code&gt; so I removed the &lt;code&gt;ComponentOptions&lt;/code&gt; and switched from using a plain object to &lt;code&gt;Vue.extend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The next thing I needed to do was a type annotation for the return valu eon the computed property.
Then the compiler started telling me &lt;code&gt;Type 'PaymentType.CreditCard' is not comparable to type 'null'.&lt;/code&gt; and I could not figure out what the issue was.&lt;/p&gt;
&lt;p&gt;After some time I realized that since the default value for &lt;code&gt;this.paymentType&lt;/code&gt; was set to null, so I added type annotions on the data object, with the resulting end code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;import Vue from 'vue';

enum PaymentType {
    Check
    CreditCard
    Cash
}

export default Vue.extend({
    name: 'AddPayment',
    data () {
        return {
            paymentType: null as PaymentType | null,
            checkNumber: '',
            ccNumber: '',
            amount: 0,
            PaymentType: PaymentType
        }
    },
    computed: {
        valid(): boolean {
            const basic = +this.amount &amp;gt; 0 &amp;amp;&amp;amp; this.paymentType !== null;

           switch (this.paymentType) {
				case PaymentType.CreditCard:
					return basic &amp;amp;&amp;amp; !!(this.ccNumber || '').trim().length;
				case PaymentType.Check:
					return basic &amp;amp;&amp;amp; !!(this.checkNumber || '').trim().length;
				default:
					return basic;
			}
        }
    }
})

&lt;/code&gt;&lt;/pre&gt;</content:encoded>
		</item>
	</channel>
</rss>