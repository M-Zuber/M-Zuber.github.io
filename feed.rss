<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Dreams and Adventures</title>
		<link>http://m-zuber.github.io/</link>
		<description>A world of dreams and adventure with code awaits!</description>
		<copyright>2017</copyright>
		<pubDate>Thu, 23 Nov 2017 05:20:10 GMT</pubDate>
		<lastBuildDate>Thu, 23 Nov 2017 05:20:10 GMT</lastBuildDate>
		<item>
			<title>Using typescript enums inside a single file vue component</title>
			<link>http://m-zuber.github.io/posts/typescript-enums-with-vue</link>
			<description>&lt;p&gt;If you want to use a &lt;a href="https://www.typescriptlang.org/docs/handbook/enums.html"&gt;typescript enum&lt;/a&gt; as the backing data source for a select element in vue, you need to include the enum itself in the data of the component.&lt;/p&gt;</description>
			<guid>http://m-zuber.github.io/posts/typescript-enums-with-vue</guid>
			<pubDate>Thu, 23 Nov 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;If you want to use a &lt;a href="https://www.typescriptlang.org/docs/handbook/enums.html"&gt;typescript enum&lt;/a&gt; as the backing data source for a select element in vue, you need to include the enum itself in the data of the component.&lt;/p&gt;
&lt;p&gt;This would result in code that looks similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
      &amp;lt;select v-model=&amp;quot;paymentType&amp;quot;&amp;gt;
          &amp;lt;option :value=&amp;quot;null&amp;quot;&amp;gt;Select Option&amp;lt;/option&amp;gt;
          &amp;lt;option :value=&amp;quot;PaymentType.CreditCard&amp;quot;&amp;gt;Credit Card&amp;lt;/option&amp;gt;
          &amp;lt;option :value=&amp;quot;PaymentType.Cash&amp;quot;&amp;gt;Cash&amp;lt;/option&amp;gt;
          &amp;lt;option :value=&amp;quot;PaymentType.Check&amp;quot;&amp;gt;Check&amp;lt;/option&amp;gt;
      &amp;lt;/select&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;&amp;lt;script&amp;gt;
import Vue from 'vue';

enum PaymentType {
    CreditCard,
    Cash,
    Check
}

export default Vue.extend({
    name: 'PaymentType',
    data () {
        return {
            paymentType: null as PaymentType | null,
            PaymentType: PaymentType
        }
    }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
		<item>
			<title>Using null as a default value in vue.js data</title>
			<link>http://m-zuber.github.io/posts/default-value-in-vue-data</link>
			<description>&lt;p&gt;While upgrading a project at work to use the &lt;a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08"&gt;newest typescript typings for vue&lt;/a&gt;, I ran across an interesting problem.&lt;/p&gt;</description>
			<guid>http://m-zuber.github.io/posts/default-value-in-vue-data</guid>
			<pubDate>Thu, 23 Nov 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;While upgrading a project at work to use the &lt;a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08"&gt;newest typescript typings for vue&lt;/a&gt;, I ran across an interesting problem.&lt;/p&gt;
&lt;p&gt;I had the following component (markup ommited to make the code sample smaller):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;import Vue, { ComponentOptions } from 'vue';

enum PaymentType {
    Check
    CreditCard
    Cash
}

interface AddPayment extends Vue {
    paymentType: PaymentType;
    amount: number;
    checkNumber: string;
    ccNumber: string;
}
export default {
    name: 'AddPayment',
    data () {
        return {
            paymentType: null,
            checkNumber: '',
            ccNumber: '',
            amount: 0,
            PaymentType: PaymentType
        }
    },
    computed: {
        valid() {
            const basic = +this.amount &amp;gt; 0 &amp;amp;&amp;amp; this.paymentType !== null;

           switch (this.paymentType) {
				case PaymentType.CreditCard:
					return basic &amp;amp;&amp;amp; !!(this.ccNumber || '').trim().length;
				case PaymentType.Check:
					return basic &amp;amp;&amp;amp; !!(this.checkNumber || '').trim().length;
				default:
					return basic;
			}
        }
    }
} as ComponentOptions&amp;lt;AddPayment&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but once I upgraded to typescript to 2.6.1 and vue to 2.5.8, the compilers first complaint was that &lt;code&gt;Property 'trim' does not exist on type '(() =&amp;gt; any) | ComputedOptions&amp;lt;any&amp;gt;'.&lt;/code&gt; so I removed the &lt;code&gt;ComponentOptions&lt;/code&gt; and switched from using a plain object to &lt;code&gt;Vue.extend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The next thing I needed to do was a type annotation for the return valu eon the computed property.
Then the compiler started telling me &lt;code&gt;Type 'PaymentType.CreditCard' is not comparable to type 'null'.&lt;/code&gt; and I could not figure out what the issue was.&lt;/p&gt;
&lt;p&gt;After some time I realized that since the default value for &lt;code&gt;this.paymentType&lt;/code&gt; was set to null, so I added type annotions on the data object, with the resulting end code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ts"&gt;import Vue from 'vue';

enum PaymentType {
    Check
    CreditCard
    Cash
}

export default Vue.extend({
    name: 'AddPayment',
    data () {
        return {
            paymentType: null as PaymentType | null,
            checkNumber: '',
            ccNumber: '',
            amount: 0,
            PaymentType: PaymentType
        }
    },
    computed: {
        valid(): boolean {
            const basic = +this.amount &amp;gt; 0 &amp;amp;&amp;amp; this.paymentType !== null;

           switch (this.paymentType) {
				case PaymentType.CreditCard:
					return basic &amp;amp;&amp;amp; !!(this.ccNumber || '').trim().length;
				case PaymentType.Check:
					return basic &amp;amp;&amp;amp; !!(this.checkNumber || '').trim().length;
				default:
					return basic;
			}
        }
    }
})

&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
	</channel>
</rss>